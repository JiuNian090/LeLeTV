name: Auto Tag and Release

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

# 添加更全面的权限配置
permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  auto-tag-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Check if commit message contains @CHANGELOG.md
        id: check-commit
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1 HEAD)
          if echo "$COMMIT_MSG" | grep -q "@CHANGELOG.md"; then
            echo "skip=false" >> $GITHUB_OUTPUT
          else
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      - name: Extract version and release notes from CHANGELOG.md
        if: steps.check-commit.outputs.skip == 'false'
        id: extract-info
        run: |
          # 提取最新版本号
          VERSION=$(grep -m 1 "### v" CHANGELOG.md | sed -E 's/### (v[0-9.]+).*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # 提取版本对应的更新内容
          # 获取版本行号
          VERSION_LINE=$(grep -n "### $VERSION" CHANGELOG.md | head -1 | cut -d: -f1)
          if [ -n "$VERSION_LINE" ]; then
            # 获取下一个版本的行号，如果没有下一个版本，则获取文件末尾
            NEXT_VERSION_LINE=$(tail -n +$((VERSION_LINE + 1)) CHANGELOG.md | grep -n "### " | head -1 | cut -d: -f1)
            if [ -n "$NEXT_VERSION_LINE" ]; then
              # 计算实际行号
              NEXT_VERSION_LINE=$((VERSION_LINE + NEXT_VERSION_LINE))
              # 提取版本内容
              RELEASE_NOTES=$(sed -n "$((VERSION_LINE + 1)),$((NEXT_VERSION_LINE - 1))p" CHANGELOG.md)
            else
              # 如果没有下一个版本，提取到文件末尾
              RELEASE_NOTES=$(tail -n +$((VERSION_LINE + 1)) CHANGELOG.md)
            fi
            
            # 清理内容，移除空行和多余的空格
            RELEASE_NOTES=$(echo "$RELEASE_NOTES" | sed '/^\s*$/d' | sed 's/^[[:space:]]*//')
            
            # 使用EOF方式输出，避免特殊字符问题
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Check if tag already exists
        if: steps.check-commit.outputs.skip == 'false'
        id: check-tag
        run: |
          VERSION=${{ steps.extract-info.outputs.version }}
          if git ls-remote --tags origin | grep -q "refs/tags/$VERSION$"; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: steps.check-commit.outputs.skip == 'false' && steps.check-tag.outputs.tag_exists == 'false'
        run: |
          VERSION=${{ steps.extract-info.outputs.version }}
          RELEASE_NOTES=${{ steps.extract-info.outputs.release_notes }}
          
          # 如果没有提取到更新内容，使用默认消息
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="Release $VERSION"
          fi
          
          # 创建标签
          git tag -a "$VERSION" -m "$RELEASE_NOTES"
          echo "Created tag $VERSION"
          
          # 推送标签到远程仓库
          git push origin "$VERSION"
          echo "Pushed tag $VERSION to origin"

      # 新增步骤：即使tag已存在，也要确保推送tag到远程仓库
      - name: Push tag if exists
        if: steps.check-commit.outputs.skip == 'false' && steps.check-tag.outputs.tag_exists == 'true'
        run: |
          VERSION=${{ steps.extract-info.outputs.version }}
          # 确保tag已推送到远程仓库
          git push origin "$VERSION" || echo "Tag $VERSION already exists on remote"

      - name: Check if Release already exists
        if: steps.check-commit.outputs.skip == 'false'
        id: check-release
        uses: actions/github-script@v6
        with:
          script: |
            const { version } = process.env;
            try {
              const response = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: version
              });
              console.log(`Release for tag ${version} already exists`);
              return 'release_exists=true';
            } catch (error) {
              if (error.status === 404) {
                console.log(`Release for tag ${version} does not exist`);
                return 'release_exists=false';
              } else {
                console.log(`Error checking release: ${error.message}`);
                // 即使检查失败，我们也尝试创建release
                return 'release_exists=false';
              }
            }
          env:
            version: ${{ steps.extract-info.outputs.version }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
        continue-on-error: true

      # 修改Release创建逻辑，确保即使tag已存在也能正确创建release
      - name: Create or Update Release
        if: steps.check-commit.outputs.skip == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.extract-info.outputs.version }}
          name: Release ${{ steps.extract-info.outputs.version }}
          body: |
            # Release ${{ steps.extract-info.outputs.version }}

            ## 更新内容

            ${{ steps.extract-info.outputs.release_notes }}

            ---

            自动发布于 $(date +'%Y-%m-%d %H:%M:%S')
          draft: false
          prerelease: false
          makeLatest: true
          allowUpdates: true
          # 即使release已存在，也允许更新
          updateOnly: false
          token: ${{ secrets.GITHUB_TOKEN }}